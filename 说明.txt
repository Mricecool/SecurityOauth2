Oauth2.0授权模式

应用程序注册(Application Registration)

对于一个应用程序来说，如果它想要使用OAuth，那么首先它要在服务提供商那里注册。

应用程序要提供：

应用程序名称(Application Name)
应用程序网站(Application Website)
回调URL(Redirect URI or Callback URL)
在用户同意授权(或者拒绝)之后，服务提供商会将用户重新导向这个Callback URL，这个Callback URL要来负责处理授权码或者访问令牌。

应用程序注册完成之后，服务提供商会颁发给应用程序一个“客户端认证信息(client credentials)”。Client Credential包括：

Client ID
提供给服务提供商，用于识别应用程序
用于构建提供给用户请求授权的URL
Client Secret
提供给服务提供商，用于验证应用程序
只有应用程序和服务提供商两者可知


授权码模式code

（A）用户访问客户端，客户端将用户引导向认证服务器。

（B）用户选择是否给予客户端授权。

（C）如用户给予授权，认证服务器将用户引导向客户端指定的redirection uri，同时加上授权码code。

（D）客户端收到code后，通过后台的服务器向认证服务器发送code和redirection uri。

（E）认证服务器验证code和redirection uri，确认无误后，响应客户端访问令牌（access token）和刷新令牌（refresh token）。

1、首先用户必须登录客户端

2、请求code(k4ql0E)
http://localhost:8080/oauth/authorize?response_type=code&client_id=user&redirect_uri=http://localhost:8080/auth&scope=read&state=xxx

3、获取code后请求获取token
http://localhost:8080/oauth/token?client_id=user&client_secret=user&grant_type=authorization_code&code=k4ql0E&redirect_uri=http://localhost:8080/auth


密码模式：password

密码模式（Resource Owner Password Credentials Grant）中，用户向客户端提供自己的用户名和密码。客户端使用这些信息，向"服务商提供商"索要授权。
在这种模式中，用户必须把自己的密码给客户端，但是客户端不得储存密码。这通常用在用户对客户端高度信任的情况下，比如客户端是操作系统的一部分，或者由一个著名公司出品。而认证服务器只有在其他授权模式无法执行的情况下，才能考虑使用这种模式。

请求URL:
http://localhost:8080/oauth/token?grant_type=password&client_id=user&client_secret=user&username=用户名&password=密码

刷新token

请求URL
http://localhost:8080/oauth/token?grant_type=refresh_token&refresh_token=13fa04e5-1320-47f2-8467-903b44212f13&client_id=user&client_secret=user


客户端模式：client_credentials

客户端模式（Client Credentials Grant）指客户端以自己的名义，而不是以用户的名义，向"服务提供商"进行认证。严格地说，客户端模式并不属于OAuth框架所要解决的问题。在这种模式中，用户直接向客户端注册，客户端以自己的名义要求"服务提供商"提供服务，其实不存在授权问题。

请求URL:
http://localhost:8080/oauth/token?grant_type=client_credentials&client_id=user&client_secret=user



简化模式：token

简化模式（implicit grant type）不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了"授权码"这个步骤，因此得名。所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证。